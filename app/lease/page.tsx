'use client';

import React, { useState } from 'react';
import { Upload, FileText, Languages, Download, RefreshCw, AlertTriangle, CheckCircle, Info, Copy, ExternalLink } from 'lucide-react';
import { AriaLive } from '@/components/accessibility/aria-live';
import { FileUpload } from '@/components/ui/file-upload';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { LeaseQA } from '@/lib/ai/gemini';

export default function LeasePage() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [leaseText, setLeaseText] = useState('');
  const [language, setLanguage] = useState('en');
  const [analysis, setAnalysis] = useState<LeaseQA | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [announcement, setAnnouncement] = useState('');
  const [activeTab, setActiveTab] = useState<'upload' | 'text'>('upload');

  const handleFileSelect = (file: File) => {
    setSelectedFile(file);
    setError('');
    setAnnouncement(`File selected: ${file.name}`);
  };

  const handleFileRemove = () => {
    setSelectedFile(null);
    setError('');
    setAnnouncement('File removed');
  };

  const handleAnalyze = async () => {
    if (!selectedFile && !leaseText.trim()) {
      setError('Please upload a file or enter lease text to analyze');
      setAnnouncement('Error: Please upload a file or enter lease text to analyze');
      return;
    }

    setLoading(true);
    setError('');
    setAnnouncement('Analyzing lease document...');

    try {
      let requestBody;
      let headers: Record<string, string> = {};
      
      if (selectedFile && activeTab === 'upload') {
        const formData = new FormData();
        formData.append('file', selectedFile);
        formData.append('language', language);
        requestBody = formData;
      } else {
        headers['Content-Type'] = 'application/json';
        requestBody = JSON.stringify({ lease_text: leaseText, target_language: language });
      }

      const response = await fetch('/api/lease-qa', {
        method: 'POST',
        headers,
        body: requestBody
      });

      const data = await response.json();
      
      if (response.ok) {
        setAnalysis(data);
        setAnnouncement('Lease analysis completed successfully');
      } else {
        setError(data.error || 'Analysis failed');
        setAnnouncement(`Error: ${data.error || 'Analysis failed'}`);
      }
    } catch (error) {
      setError('Failed to analyze lease. Please try again.');
      setAnnouncement('Error: Failed to analyze lease. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    if (!analysis) return;
    
    const content = `# Lease Analysis Report

## Summary
${analysis.plainSummary}

## Key Terms
${analysis.keyTerms.map(term => `- ${term}`).join('\n')}

## Required Payments
### One-Time Payments
${analysis.requiredPayments.oneTime.map(payment => `- ${payment}`).join('\n')}

### Recurring Payments
${analysis.requiredPayments.recurring.map(payment => `- ${payment}`).join('\n')}

## Junk Fees
${analysis.junkFees.map(fee => `- ${fee}`).join('\n')}

## Risk Notes
${analysis.riskNotes.map(risk => `- ${risk}`).join('\n')}

## Questions to Ask
${analysis.tenantQuestions.map(question => `- ${question}`).join('\n')}

${analysis.translation ? `## Translation\n${analysis.translation}` : ''}

---
Analysis generated by ${analysis.model}
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'lease-analysis.txt';
    a.click();
    URL.revokeObjectURL(url);
    setAnnouncement('Report downloaded successfully');
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setAnnouncement('Copied to clipboard');
  };

  const resetForm = () => {
    setAnalysis(null);
    setSelectedFile(null);
    setLeaseText('');
    setError('');
    setActiveTab('upload');
    setAnnouncement('Form reset');
  };

  const languages = [
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Spanish' },
    { code: 'fr', name: 'French' },
    { code: 'de', name: 'German' },
    { code: 'zh', name: 'Chinese' }
  ];

  return (
    <div className="min-h-screen py-8 bg-radial bg-grid">
      <AriaLive message={announcement} assertive={!!error} />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-12">
          <div className="flex items-center gap-4 mb-6">
            <div className="w-14 h-14 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-xl flex items-center justify-center">
              <FileText className="w-7 h-7 text-white" />
            </div>
            <div>
              <h1 className="text-3xl sm:text-4xl font-bold text-white text-shadow mb-2">
                AI Lease Analysis
              </h1>
              <p className="text-white/70 text-base sm:text-lg leading-relaxed">
                Upload your lease document or paste text for AI-powered analysis, translation, and compliance checking
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
          {/* Input Section */}
          <div className="lg:col-span-2 space-y-6">
            <Card className="p-6">
              <CardHeader>
                <CardTitle className="text-2xl text-white mb-4">Upload Lease Document</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Tab Selection */}
                <div className="flex space-x-2">
                  <Button
                    onClick={() => setActiveTab('upload')}
                    variant={activeTab === 'upload' ? 'gradient' : 'glass'}
                    className="flex-1"
                  >
                    <Upload className="w-4 h-4 mr-2" />
                    Upload File
                  </Button>
                  <Button
                    onClick={() => setActiveTab('text')}
                    variant={activeTab === 'text' ? 'gradient' : 'glass'}
                    className="flex-1"
                  >
                    <FileText className="w-4 h-4 mr-2" />
                    Paste Text
                  </Button>
                </div>

                {/* Language Selection */}
                <div>
                  <label htmlFor="language" className="block text-sm font-medium text-white mb-3">
                    <Languages className="w-4 h-4 inline mr-2" />
                    Document Language
                  </label>
                  <select
                    id="language"
                    value={language}
                    onChange={(e) => setLanguage(e.target.value)}
                    className="w-full px-4 py-3 border border-white/20 rounded-xl focus-ring bg-white/10 text-white placeholder-white/60"
                  >
                    {languages.map(lang => (
                      <option key={lang.code} value={lang.code} className="bg-slate-800 text-white">
                        {lang.name}
                      </option>
                    ))}
                  </select>
                </div>

                {/* File Upload */}
                {activeTab === 'upload' && (
                  <FileUpload
                    onFileSelect={handleFileSelect}
                    onFileRemove={handleFileRemove}
                    selectedFile={selectedFile}
                    className="w-full"
                  />
                )}

                {/* Text Input */}
                {activeTab === 'text' && (
                  <div>
                    <label htmlFor="leaseText" className="block text-sm font-medium text-white mb-3">
                      <FileText className="w-4 h-4 inline mr-2" />
                      Lease Text
                    </label>
                    <textarea
                      id="leaseText"
                      value={leaseText}
                      onChange={(e) => setLeaseText(e.target.value)}
                      placeholder="Paste your lease document text here..."
                      className="w-full h-64 px-4 py-3 border border-white/20 rounded-xl focus-ring bg-white/10 text-white placeholder-white/60 resize-vertical"
                    />
                  </div>
                )}

                {error && (
                  <Card className="p-4 bg-red-500/10 border-red-500/20">
                    <div className="flex items-center space-x-2 text-red-300">
                      <AlertTriangle className="w-5 h-5" />
                      <span className="font-medium">{error}</span>
                    </div>
                  </Card>
                )}

                <Button
                  onClick={handleAnalyze}
                  disabled={loading || (!selectedFile && !leaseText.trim())}
                  variant="gradient"
                  className="w-full min-h-[48px] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Analyzing...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Analyze Lease
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Results Section */}
          <div className="lg:col-span-3 space-y-6">
            {analysis ? (
              <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
                {/* Summary */}
                <Card className="p-6">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex items-center justify-between">
                      <span className="flex items-center">
                        <Info className="w-5 h-5 mr-2 text-emerald-400" />
                        Summary
                      </span>
                      <Button
                        onClick={() => copyToClipboard(analysis.plainSummary)}
                        variant="ghost"
                        size="sm"
                        className="text-white/60 hover:text-white"
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-white/80 leading-relaxed">{analysis.plainSummary}</p>
                    {analysis.translation && (
                      <div className="mt-4 p-3 bg-blue-500/10 border border-blue-500/20 rounded-lg">
                        <p className="text-blue-300 text-sm font-medium mb-2">Translation:</p>
                        <p className="text-blue-200 text-sm">{analysis.translation}</p>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Key Terms */}
                <Card className="p-6">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex items-center justify-between">
                      <span className="flex items-center">
                        <FileText className="w-5 h-5 mr-2 text-blue-400" />
                        Key Terms
                      </span>
                      <Button
                        onClick={() => copyToClipboard(analysis.keyTerms.join('\n'))}
                        variant="ghost"
                        size="sm"
                        className="text-white/60 hover:text-white"
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-3">
                      {analysis.keyTerms.map((term, index) => (
                        <li key={index} className="flex items-start space-x-3 text-white/80">
                          <span className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></span>
                          <span>{term}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                {/* Required Payments */}
                <Card className="p-6 xl:col-span-2">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex items-center">
                      <CheckCircle className="w-5 h-5 mr-2 text-green-400" />
                      Required Payments
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="font-semibold text-green-300 mb-3">One-Time Payments</h4>
                        <ul className="space-y-2">
                          {analysis.requiredPayments.oneTime.map((payment, index) => (
                            <li key={index} className="flex items-start space-x-2 text-green-200 text-sm">
                              <span className="w-1.5 h-1.5 bg-green-400 rounded-full mt-2 flex-shrink-0"></span>
                              <span>{payment}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h4 className="font-semibold text-blue-300 mb-3">Recurring Payments</h4>
                        <ul className="space-y-2">
                          {analysis.requiredPayments.recurring.map((payment, index) => (
                            <li key={index} className="flex items-start space-x-2 text-blue-200 text-sm">
                              <span className="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 flex-shrink-0"></span>
                              <span>{payment}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Junk Fees */}
                {analysis.junkFees.length > 0 && (
                  <Card className="p-6 bg-amber-500/10 border-amber-500/20">
                    <CardHeader>
                      <CardTitle className="text-xl text-amber-300 flex items-center">
                        <AlertTriangle className="w-5 h-5 mr-2" />
                        Junk Fees
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ul className="space-y-3">
                        {analysis.junkFees.map((fee, index) => (
                          <li key={index} className="flex items-start space-x-3 text-amber-200">
                            <span className="w-2 h-2 bg-amber-400 rounded-full mt-2 flex-shrink-0"></span>
                            <span>{fee}</span>
                          </li>
                        ))}
                      </ul>
                    </CardContent>
                  </Card>
                )}

                {/* Risk Notes */}
                {analysis.riskNotes.length > 0 && (
                  <Card className="p-6 bg-red-500/10 border-red-500/20">
                    <CardHeader>
                      <CardTitle className="text-xl text-red-300 flex items-center">
                        <AlertTriangle className="w-5 h-5 mr-2" />
                        Risk Notes
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ul className="space-y-3">
                        {analysis.riskNotes.map((risk, index) => (
                          <li key={index} className="flex items-start space-x-3 text-red-200">
                            <span className="w-2 h-2 bg-red-400 rounded-full mt-2 flex-shrink-0"></span>
                            <span>{risk}</span>
                          </li>
                        ))}
                      </ul>
                    </CardContent>
                  </Card>
                )}

                {/* Tenant Questions */}
                <Card className="p-6 xl:col-span-2">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex items-center">
                      <Info className="w-5 h-5 mr-2 text-purple-400" />
                      Questions to Ask
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-3">
                      {analysis.tenantQuestions.map((question, index) => (
                        <li key={index} className="flex items-start space-x-3 text-white/80">
                          <span className="w-2 h-2 bg-purple-400 rounded-full mt-2 flex-shrink-0"></span>
                          <span>{question}</span>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                {/* Actions */}
                <div className="xl:col-span-2 flex flex-col sm:flex-row gap-4">
                  <Button
                    onClick={handleDownload}
                    variant="glass"
                    className="flex-1 min-h-[48px]"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Download Report
                  </Button>
                  <Button
                    onClick={resetForm}
                    variant="glass"
                    className="min-h-[48px]"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    New Analysis
                  </Button>
                </div>

                {/* Model Info */}
                <div className="xl:col-span-2 text-center">
                  <p className="text-white/50 text-sm">
                    Analysis powered by {analysis.model}
                  </p>
                </div>
              </div>
            ) : (
              <Card className="p-8 text-center">
                <div className="w-20 h-20 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
                  <FileText className="w-10 h-10 text-white" />
                </div>
                <h3 className="text-xl font-semibold text-white mb-3">No Analysis Yet</h3>
                <p className="text-white/70 leading-relaxed">
                  Upload your lease document or paste the text above and click "Analyze Lease" to get started with AI-powered analysis.
                </p>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}